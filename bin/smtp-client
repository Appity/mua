#!/usr/bin/env ruby

# == Imports ================================================================

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'bundler'
require 'optparse'

Bundler.require(:default, ENV['APP_ENV']&.to_sym || :development)

require 'mua'
require 'async'
require 'logger'

# Async.logger.level = Logger::DEBUG

# == Support Methods ========================================================

# == Main ===================================================================

# NOTE: These need to be defined like x-y and are transformed to x_y
options = {
  timeout: 30,
  silent: false,
  debug: false,
  'smtp-host': 'localhost',
  'smtp-port': 25,
  'proxy-port': 1080,
  recursive: false,
  'dry-run': false,
  backoff: 5,
  retries: 1,
  connections: 1
}

program = OptionParser.new do |opts|
  opts.on('-s', '--silent', 'Suppress output')
  opts.on('-d', '--debug', 'Enable debug log of stream communcation')
  opts.on('-v', '--verbose', 'Enable versbose mode')
  opts.on('-h', '--smtp-host HOST', 'Use SMTP host')
  opts.on('-H', '--smtp-port PORT', 'Use SMTP port', Integer)
  opts.on('-b', '--hostname HOSTNAME', 'EHLO/HELO hostname identifier')
  opts.on('-p', '--proxy-host HOST', 'Use SOCKS5 proxy host')
  opts.on('-P', '--proxy-port PORT', 'Use SOCKS5 proxy port', Integer)
  opts.on('-t', '--timeout TIMEOUT', 'Set SMTP command timeout (seconds)', Integer)
  opts.on('-R', '--recursive', 'Import email data recurisvely')
  opts.on('-y', '--dry-run', 'Dry run, do not actually send')
  opts.on('-c', '--connections COUNT', 'Number of concurrent connections', Integer)
  opts.on('-l', '--limit LIMIT', 'Limit sending volume', Integer)
  opts.on('-S', '--shuffle', 'Shuffle sending order')
  opts.on('-f', '--fork COUNT', 'Fork N times before sending', Integer)
  opts.on('-w', '--stopwatch', 'Enable performance metrics')
  opts.on('--retries LIMIT', 'Limit to a particular number of retries')
  opts.on('--report', 'Print delivery report')
  opts.on('--report-failed', 'Only show delivery failures')
end

args = program.parse!(ARGV, into: options)

options.transform_keys! do |k|
  k.to_s.tr('-', '_').to_sym
end

if (options[:debug])
  Async::IO::Stream.prepend(Mua::Debug::StreamExtensions)
end

# TODO: Add Async::IO::Trap.new(:INT)
#       per https://github.com/socketry/async-io/blob/master/examples/echo/server.rb

messages = Mua::Message::Batch.new

Async do
  args.each do |path|
    if (File.directory?(path))
      Mua::Message::Batch.from_path(
        path,
        shuffle: options[:shuffle],
        limit: options[:limit],
        recursive: options[:recursive],
        into: messages
      )

      # samples(path, shuffle: options[:shuffle], limit: options[:limit], recursive: options[:recursive]) do |file|
      #   messages << message_parse(file, options)
      # end
    elsif (File.file?(path))
      messages << Mua::Message.load_file(path)
    end
  end

  messages.close!
end

if (options[:verbose])
  puts("> Loaded %d sample(s)" % messages.queue_length)
end

if (options[:fork])
  (options[:fork] - 1).times do |f|
    break unless (fork)
  end
end

start = Time.now.utc

begin
  Async do |reactor|
    retries = 0
    options[:reactor] = reactor

    options[:batch] = messages

    while (messages.queue_any?)
      if (options[:verbose])
        via_proxy = options[:proxy_host] && (' through %s:%s' % [ options[:proxy_host], options[:proxy_port] ])

        puts('%s:%d> Ready to initiate connection%s' % [
          options[:smtp_host],
          options[:smtp_port],
          via_proxy
        ])
      end

      options[:connections].times.map do
        Mua::SMTP::Client.new(**options) do |context, state, event, *args|
          if (options[:verbose] and event == :entered and state.name == :established)
            puts('%s:%d> Connected%s' % [
              options[:smtp_host],
              options[:smtp_port],
              via_proxy
            ])
          end

          next unless (options[:debug])

          puts('%s:%d> %s %s %s' % [
            context.smtp_host,
            context.smtp_port,
            state.name,
            event,
            args.any? ? args.inspect : ''
          ])
        end
      end.each(&:wait)

      # Short back-off before reconnecting
      if (messages.queue_any?)
        retries += 1

        if (retries > options[:retries])
          if (options[:verbose])
            puts '> Exhausted retry limit (%d)' % options[:retries]
          end

          break
        end

        if (options[:verbose])
          puts '> Backing off %d second(s) before reconnecting to deliver remaining %d message(s)' % [
            options[:backoff],
            messages.queue_length
          ]
        end

        reactor.sleep(options[:backoff])
      end
    end

    puts(
      messages.message_report.map do |state, count|
        '%d %s (%.1f%%)' % [
          count,
          state,
          count * 100.0 / messages.length
        ]
      end.join(', ')
    )
  end.wait

  if (options[:stopwatch])
    delta = Time.now - start

    report = messages.message_report

    mb = messages.messages.map { |d| d.data.bytesize }.sum / 1024**2

    puts('Sent %d message(s) in %.1fs at %.1fMPS (%.1fMB at %.1fMB/s)' % [
      report[:delivered],
      delta,
      report[:delivered] / delta,
      mb,
      mb / delta
    ])
  end

  if (options[:report])
    results = messages.message_results

    pp results

    if (options[:'report-failed'])
      results.reject! { |m| m[:state] == :delivered }
    end

    results.each do |message|
      puts 'Message-ID: %s' % message[:id]
      puts 'State: %s' % message[:state]

      message[:results].each do |result|
        puts '  %s [%s] %s' % [
          result[:result_code],
          result[:state],
          result[:result_message]
        ]
      end
    end
  end

rescue Interrupt
  exit(-1)
end
