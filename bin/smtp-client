#!/usr/bin/env ruby

# == Imports ================================================================

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'bundler'
require 'optparse'

Bundler.require(:default, ENV['APP_ENV']&.to_sym || :development)

require 'mua'
require 'async'
require 'logger'

# Async.logger.level = Logger::DEBUG

# == Support Methods ========================================================

def samples(path, recursive: false, shuffle: false, limit: false, &block)
  files = [ ]

  if (File.file?(path))
    files << path
  else
    spec = recursive ? '**/*' : '*'

    files += Dir.glob(File.expand_path(File.join(path, spec), Dir.pwd)).select do |f|
      File.file?(f)
    end

    if (shuffle)
      files.shuffle!
    end

    if (limit)
      files = files.first(limit)
    end
  end

  if (block_given?)
    files.each(&block)
  end

  files
end

# == Main ===================================================================

# NOTE: These need to be defined like x-y and are transformed to x_y
options = {
  timeout: 30,
  silent: false,
  debug: false,
  'smtp-host': 'localhost',
  'smtp-port': 25,
  'proxy-port': 1080,
  recursive: false,
  'dry-run': false
}

program = OptionParser.new do |opts|
  opts.on('-s', '--silent', 'Suppress output')
  opts.on('-d', '--debug', 'Enable debug log of stream communcation')
  opts.on('-v', '--verbose', 'Enable versbose mode')
  opts.on('-h', '--smtp-host HOST', 'Use SMTP host')
  opts.on('-H', '--smtp-port PORT', 'Use SMTP port', Integer)
  opts.on('-b', '--hostname HOSTNAME', 'EHLO/HELO hostname identifier')
  opts.on('-p', '--proxy-host HOST', 'Use SOCKS5 proxy host')
  opts.on('-P', '--proxy-port PORT', 'Use SOCKS5 proxy port', Integer)
  opts.on('-t', '--timeout TIMEOUT', 'Set SMTP command timeout (seconds)', Integer)
  opts.on('-R', '--recursive', 'Import email data recurisvely')
  opts.on('-y', '--dry-run', 'Dry run, do not actually send')
  opts.on('-l', '--limit LIMIT', 'Limit sending volume', Integer)
  opts.on('-S', '--shuffle', 'Shuffle sending order')
  opts.on('-f', '--fork COUNT', 'Fork N times before sending', Integer)
  opts.on('-w', '--stopwatch', 'Enable performance metrics')
end

args = program.parse!(ARGV, into: options)

options.transform_keys! do |k|
  k.to_s.tr('-', '_').to_sym
end

if (options[:debug])
  Async::IO::Stream.prepend(Mua::Debug::StreamExtensions)
end

# TODO: Add Async::IO::Trap.new(:INT)
#       per https://github.com/socketry/async-io/blob/master/examples/echo/server.rb

messages = [ ]

args.each do |path|
  samples(path, shuffle: options[:shuffle], limit: options[:limit], recursive: options[:recursive]) do |f|
    data = File.read(f).gsub(/\r?\n/, "\r\n")

    parsed = Mail.new(data)

    messages << {
      id: File.basename(f),
      mail_from: parsed.from[0],
      rcpt_to: parsed.to,
      name: f.delete_prefix(Dir.pwd + '/'),
      data: data
    }
  end
end

if (options[:debug])
  puts("> Loaded %d sample(s)" % messages.length)
end

if (options[:fork])
  (options[:fork] - 1).times do |f|
    break unless (fork)
  end
end

start = Time.now.utc

begin
  Async do |reactor|
    options[:reactor] = reactor

    if (options[:verbose])
      via_proxy = options[:proxy_host] && (' through %s:%s' % [ options[:proxy_host], options[:proxy_port] ])

      puts('%s:%d> Ready to initiate connection%s' % [
        options[:smtp_host],
        options[:smtp_port],
        via_proxy
      ])
    end

    client = Mua::SMTP::Client.new(**options) do |context, state, event, *args|
      next unless (options[:verbose])

      puts('%s:%d> %s %s %s' % [
        context.smtp_host,
        context.smtp_port,
        state.name,
        event,
        args.any? ? args.inspect : ''
      ])
    end

    deliveries = messages.map do |message|
      if (options[:verbose])
        puts '%s>> Queued message' % [ message[:id] ]
      end

      client.deliver!(**message)
    end

    deliveries.map!(&:wait)

    client.quit!

    deliveries.group_by(&:delivered?).each do |delivered, list|
      puts '%5.1f%% %s' % [
        list.length * 100.0 / deliveries.length,
        delivered ? 'Delivered' : 'Not Delivered'
      ]
    end
  end.wait

  if (options[:stopwatch])
    delta = Time.now - start

    mb = messages.map { |d| d[:data].bytesize }.sum / 1024**2

    puts('Sent %d message(s) in %.1fs at %.1fMPS (%.1fMB at %.1fMB/s)' % [
      messages.length,
      delta,
      messages.length / delta,
      mb,
      mb / delta
    ])
  end

rescue Interrupt
  exit(-1)
end
