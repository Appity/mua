#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'bundler'
require 'optparse'

Bundler.require(:default, ENV['APP_ENV']&.to_sym || :development)

require 'mua'
require 'async'
require 'logger'

# Async.logger.level = Logger::DEBUG

# == Support Methods ========================================================

def samples(path, recursive: false, shuffle: false, limit: false)
  spec = recursive ? '**/*' : '*'

  files = Dir.glob(File.expand_path(File.join(path, spec), Dir.pwd)).select do |f|
    File.file?(f)
  end

  if (shuffle)
    files.shuffle!
  end

  if (limit)
    files = files.first(limit)
  end

  if (block_given?)
    files.each(&Proc.new)
  end

  files
end

# == Main ===================================================================

# NOTE: These need to be defined like x-y and are transformed to x_y
options = {
  timeout: 30,
  silent: false,
  debug: false,
  'proxy-port': 1080,
  recursive: false,
  'dry-run': false
}

program = OptionParser.new do |opts|
  opts.on('-s', '--silent', 'Suppress output')
  opts.on('-d', '--debug', 'Enable debug log of stream communcation')
  opts.on('-v', '--verbose', 'Enable versbose mode')
  opts.on('-h', '--smtp-host HOST', 'Use SMTP host')
  opts.on('-H', '--smtp-port PORT', 'Use SMTP port', Integer)
  opts.on('-p', '--proxy-host HOST', 'Use SOCKS5 proxy host')
  opts.on('-P', '--proxy-port PORT', 'Use SOCKS5 proxy port', Integer)
  opts.on('-t', '--timeout=TIMEOUT', 'Set SMTP command timeout (seconds)', Integer)
  opts.on('-R', '--recursive', 'Import email data recurisvely')
  opts.on('-y', '--dry-run', 'Dry run, do not actually send')
  opts.on('-l', '--limit LIMIT', 'Limit sending volume', Integer)
  opts.on('-S', '--shuffle', 'Shuffle sending order')
  opts.on('-f', '--fork COUNT', 'Fork N times before sending', Integer)
  opts.on('-w', '--stopwatch', 'Enable performance metrics')
end

args = program.parse!(ARGV, into: options)

options.transform_keys! do |k|
  k.to_s.tr('-', '_').to_sym
end

if (options[:debug])
  Async::IO::Stream.prepend(Mua::Debug::StreamExtensions)
end

# TODO: Add Async::IO::Trap.new(:INT)
#       per https://github.com/socketry/async-io/blob/master/examples/echo/server.rb

deliveries = [ ]

args.each do |path|
  samples(path, shuffle: options[:shuffle], limit: options[:limit], recursive: options[:recursive]) do |f|
    deliveries << {
      name: f.delete_prefix(Dir.pwd + '/'),
      data: File.read(f).gsub(/\r?\n/, "\r\n")
    }
  end
end

if (options[:fork])
  (options[:fork] - 1).times do |f|
    break unless fork
  end
end

start = Time.now.utc

Async do |reactor|
  options[:reactor] = reactor

  client = Mua::SMTP::Client.new(options) do |context, state, event, *args|
    next unless (options[:verbose])

    puts('%s> %s' % [ context.remote_addr, event ])
  end

  deliveries.each do |delivery|
    if (options[:verbose])
      puts delivery[:name]
    end

    client.deliver!(
      mail_from: 'test@pistachio.email',
      rcpt_to: 'test@pistachio.email',
      data: delivery[:data]
    )

    client.quit!
  end
end

if (options[:stopwatch])
  delta = Time.now - start

  puts('Sent %d message(s) in %.1fs at %.1fMPS (%.1fMB/s)' % [
    deliveries.length,
    delta,
    deliveries.length / delta,
    deliveries.map { |d| d[:data].bytesize }.sum / delta / 1024**2
  ])
end