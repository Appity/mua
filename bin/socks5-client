#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'bundler'
require 'optparse'

Bundler.require(:default, ENV['APP_ENV']&.to_sym || :development)

require 'mua'
require 'async'
require 'logger'

# Async.logger.level = Logger::DEBUG

# == Support Methods ========================================================

# == Main ===================================================================

# NOTE: These need to be defined like x-y and are transformed to x_y
options = {
  timeout: 30,
  silent: false,
  debug: false,
  'proxy-host': '127.0.0.1',
  'proxy-port': 1080,
  'dry-run': false
}

program = OptionParser.new do |opts|
  opts.on('-s', '--silent', 'Suppress output')
  opts.on('-d', '--debug', 'Enable debug log of stream communcation')
  opts.on('-v', '--verbose', 'Enable versbose mode')
  opts.on('-p', '--proxy-host HOST', 'Use SOCKS5 proxy host')
  opts.on('-P', '--proxy-port PORT', 'Use SOCKS5 proxy port', Integer)
  opts.on('-t', '--timeout=TIMEOUT', 'Set SMTP command timeout (seconds)', Integer)
  opts.on('-y', '--dry-run', 'Dry run, do not actually send')
  opts.on('-l', '--limit LIMIT', 'Limit sending volume', Integer)
end

args = program.parse!(ARGV, into: options)

options.transform_keys! do |k|
  k.to_s.tr('-', '_').to_sym
end

if (options[:debug])
  Async::IO::Stream.prepend(Mua::Debug::StreamExtensions)
end

# TODO: Add Async::IO::Trap.new(:INT)
#       per https://github.com/socketry/async-io/blob/master/examples/echo/server.rb

case (args.length)
when 1
  options[:smtp_host], options[:smtp_port] = args[0].split(/:/)
else
  $stderr.puts("Requires a destination to connect to (e.g. 127.0.0.1:80)")
  exit(-1)
end

Async do |reactor|
  options[:reactor] = reactor

  oslice = options.slice(
    :timeout,
    :smtp_host,
    :smtp_port,
    :proxy_host,
    :proxy_port
  )

  client = Mua::SOCKS5::Client.new(oslice) do |context, state, event, *args|
    next unless (options[:verbose])

    case (context)
    when Mua::State::Context
      puts('%s> %s.%s' % [ context.smtp_addr, state.name, event ])
    end
  end
end
