#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'bundler'
require 'optparse'

Bundler.require(:default, ENV['APP_ENV']&.to_sym || :development)

require 'mua'
require 'async'
require 'logger'

# Async.logger.level = Logger::DEBUG

# == Main ===================================================================

options = {
  timeout: 30,
  silent: false
}

program = OptionParser.new do |opts|
  opts.on('-d', '--debug', 'Enable debug log of stream communcation')
  opts.on('-v', '--verbose', 'Enable versbose mode')
  opts.on('-s', '--silent', 'Suppress output')
  opts.on('-t', '--timeout=TIMEOUT', 'Set SOCKS5 negotiation timeout (seconds)', Integer)
end

program.parse!(ARGV, into: options)

if (options[:debug])
  Async::IO::Stream.prepend(Mua::Debug::StreamExtensions)
end

# TODO: Add Async::IO::Trap.new(:INT)
#       per https://github.com/socketry/async-io/blob/master/examples/echo/server.rb

Async do
  received = Hash.new do |h,k|
    h[k] = {
      messages: 0,
      bytes: 0
    }
  end

  server = Mua::SOCKS5::Server.new(timeout: options[:timeout]) do |context, state, event, *args|
    if (options[:verbose])
      puts('%s> %s %s' % [ context.remote_addr, state.name, event, args ])
    end
  end

  unless (options[:silent])
    puts('SOCKS5 server listening on %s:%d' % [ server.bind, server.port ])
  end
end
